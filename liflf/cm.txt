(* | *)

Definition a : nat := 1.
Definition b : nat := 2.

Compute (a+b).
Check (a+b).

Inductive booleens : Type :=
| Vrai : booleens
| Faux : booleens.

Definition non (a : booleens) : booleens :=
  match a with
  | Vrai => Faux
  | Faux => Vrai
  end.

Compute (non (non Vrai)).

Definition et (a : booleens) (b : booleens) : booleens :=
  match a with
  | Faux => Faux
  | Vrai => b
  end.

Compute (et Vrai Faux).

Inductive entiers : Type :=
  | zero : entiers
  | succ : entiers -> entiers.

Definition un : entiers := succ zero.
Definition deux : entiers := succ un.

Compute deux.

Definition pred (n : entiers) : entiers :=
  match n with
  | zero => zero
  | succ x => x
  end.

Compute (pred cinq).

Definition plus (n : entiers) (m : entiers) : entiers :=
  match n with
  | zero => m
  | succ x => succ (plus x m)
  end.

Compute (plus cinq deux).



